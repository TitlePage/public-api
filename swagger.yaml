swagger: '2.0'
info:
  description: The Australian Publishers Association API
  version: 1.0.0
  title: APA API
  termsOfService: https://www.publishers.asn.au/Web/Terms-and-Conditions.aspx
  contact:
    email: support@stsoftware.com.au
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: api.titlepage.com.au
basePath: /v1
tags:
  - name: Public API
    description: Publically callable ( no autentication ) APIs
    externalDocs:
      description: Find out more
      url: https://titlepage.com.au
  - name: Bookseller API
    description: Authorized bookseller APIs
  - name: Non-Bookseller API
    description: Authorized publisher APIs
  - name: APA Administration API
    description: APA administration API
  - name: Stage 2
    description: APIs for Stage 2 implementation
schemes:
  - https
paths:
  /publisher/stock/{ISBN-13}:
    put:
      tags:
        - Non-Bookseller API
      summary: Update the stock & availability of an ISBN-13 for a publisher (Block 6 update)
      description: |-
        Product supply details (including stock OnHand, OnOrder and CBO) TODO - think about adjusting the Loader reports so that a block/partial update only sends a loader report about the blocks that were updated - this will prevent huge numbers of error reports being generated from stock updates to ISBNs that are missing an element from blocks 1-5 - this would also be a solution for a Distributor who is providinig bvery accurate Block 6 partial updates and is receiving back error emails for missing elements in blocks 1-5 which they haven't loaded and never will load
        TODO - Parminder - give Lei/Tina a few complex examples. We need a second endpoint that does only a stock update (return an error if we can't uniquely identify it)
        TODO - Parminder - Find these complex examples with regex/wc etc (find an ISBN with the most SupplyBlocks)
      operationId: publsiherStock
      consumes:
        - application/xml
      produces:
        - application/json
      parameters:
        - name: ISBN-13
          in: path
          description: ISBN-13 of the title to be updated.
          required: true
          type: integer
          format: int64
          minimum: 9780000000000
          maximum: 9790000000000
        - in: body
          name: productSupply
          description: The ONIX 3.0 Block 6
          required: true
          schema:
            $ref: '#/definitions/PublisherStock'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid stock information supplied ( validation issue)
        '404':
          description: ISBN-13 not found for this publisher.
      security:
        - api_key: []
  /availability/{ISBN-13}:
    get:
      tags:
        - Public API
      summary: Find booksellers within the given radius with available stock of the ISBN-13.
      description: |-
        Returns a list of bookstores with available stock with the radius, if longitude/latitude is not given then the approximate location of the user's IP address will be used. The results will be ordered by distance from the client. If no bookstores have any stock of the required book an empty (zero length) array will be returned.
         Browser API to get the current location (requires user permission) https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API
         TODO - Robbie - This could be modified to give values such as, Low Stock or In Stock, or traffic lights
         What would bookstores prefer?
         What store info would bookstores want? We have basic info, would they want their open hours added?
      operationId: findISBN
      produces:
        - application/json
      parameters:
        - name: ISBN-13
          in: path
          description: ISBN-13 of the title check the avalibilty
          required: true
          type: integer
          format: int64
          minimum: 9780000000000
          maximum: 9790000000000
        - name: latitude
          in: query
          type: number
          minimum: -90
          maximum: 90
        - name: longitude
          in: query
          type: number
          minimum: -90
          maximum: 90
        - name: radius
          description: The number of killometers from the client to the book store ( as the crow flies)
          in: query
          type: integer
          minimum: 1
          default: 10
          maximum: 100
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Location'
        '400':
          description: Invalid ISBN-13 supplied
        '404':
          description: ISBN-13 not found
  /onix/{ISBN-13}:
    get:
      tags:
        - Public API
      summary: Redirects to a REDACTED ONIX 3.0 file for the ISBN-13
      description: Redirects (status 302) to the REDACTED ONIX 3.0 file stored on S3. The file name just a function of the ISBN-13 number so must be refetched to validate that the client has the latest copy.
      operationId: publicOnix
      produces:
        - application/json
      parameters:
        - name: ISBN-13
          in: path
          description: ISBN-13 of the title to return
          required: true
          type: integer
          format: int64
          minimum: 9780000000000
          maximum: 9790000000000
      responses:
        '302':
          description: Redirect to the REDACTED ONIX 3.0 file on S3', example "https://public.onix.s3.aws.com/001/9780000000001.xml.gz"
        '400':
          description: Invalid ISBN-13 supplied
        '404':
          description: ISBN-13 not found
  /list/pre-built:
    get:
      tags:
        - Bookseller API
      summary: Return a list of active pre-built files available
      description: |- 
        Return a list of active pre-built files available to the current bookseller, which will include all booksellers and this bookseller's own custom pre-builts.
        TODO: Mark the fileName field unique and searchable
        TODO: Add warning message for the critical fields such as filename, criteria, onix version etc.
        TODO: does publisher need to use the pre-built APIs, if they do, what prebuilt records should we return for the list API?
        TODO: do we need filter for the list? Do we also need to paging the list?
        TODO: Parminder, please add the 'filename' field into the search screen of the prebuilt
      operationId: listPreBuilt
      responses:
        '200':
          description: A list of pre-built files that are available to all booksellers, and their own custom pre-built files.
          schema:
            $ref: '#/definitions/ListPreBuilt'
      security:
        - api_key: []
  /pre-built/{NAME}:
    get:
      tags:
        - Bookseller API
      summary: Returns the pre-built ONIX 3.0 file.
      description: |-
        Full ONIX files pre-built.
        TODO: should the response be the pre-built file in a JSON format or send the file for the user to download?
      operationId: preBuilt
      produces:
        - application/json
      parameters:
        - name: NAME
          in: path
          description: The name of the pre-built list
          required: true
          type: string
      responses:
        '200':
          description: The full ONIX 3.0 file.
        '404':
          description: NAME not found
      security:
        - api_key: []
  /onix-full/{ISBN-13}:
    get:
      tags:
        - Bookseller API
      summary: Returns to FULL ONIX 3.0 file for the ISBN-13
      description: |-
        Redirects (status 302) to the full unredacted ONIX 3.0 file stored on S3. The file name is a SHA512 of the file content thus can be cached permanently on the client-side.
      operationId: fullOnix
      produces:
        - application/json
      parameters:
        - name: ISBN-13
          in: path
          description: ISBN-13 of the title to return
          required: true
          type: integer
          format: int64
          minimum: 9780000000000
          maximum: 9790000000000
      responses:
        '302':
          description: Redirect to the full ONIX 3.0 file on S3
        '400':
          description: Invalid ISBN-13 supplied
        '404':
          description: ISBN-13 not found
      security:
        - api_key: []
  /search:
    get:
      tags:
        - Bookseller API
      summary: Search by Title or ISBN-13 will return a list of matching full ONIX 3.0 URLs.
      description: |-
        Allow search by title or a list of ISBN-13. The response is the matching ISBN-13 list. Maximum of 1000 matching ISBN-13

        @TODO  How do we handle missing ISBN-13? - what we can do is provide in the JSONObject response, at the top, a list of ISBNs that we haven't matched.
        @TODO  But why do we want to return all the missing ISBN-13? Return a JSONObject is more complicated than returning a JSONArray.
         
      operationId: searchOnix
      produces:
        - application/json
      parameters:
        - name: title
          in: query
          description: The title to search
          type: string
        - name: ISBN-13
          in: query
          description: A list (comma seperated) of ISBN-13
          type: string
          format: int64
      responses:
        '200':
          description: List of matching full ONIX 3.0 URLs
          schema:
            $ref: '#/definitions/SearchResult'
        '400':
          description: No valid query parameters
      security:
        - api_key: []
  /request-token:
    post:
      tags:
        - Stage 2
      summary: Request a public token
      description: ''
      operationId: requestToken
      produces:
        - application/json
      parameters:
        - in: body
          name: tokenRequest
          description: Request a public token
          required: true
          schema:
            $ref: '#/definitions/TokenRequest'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Request
  /bookseller:
    post:
      tags:
        - APA Administration API
      summary: Create a bookseller
      description: |-
        TODO - the schema, operation & body names are wrong      
        TODO - Cat would prefer to use the SAN that is a unique identifier that is already used in TP for some
        TODO - who is going to register the booksellers? We might need a create bookseller ReST for APA staff, and a update bookseller details ReST for either APA staff or logged in booksellers. The token API only generate/regenerate the API for this bookseller. It can be requested by either APA staff or logged in booksellers. We need the bookseller details when we create them or update details. But the details are not necessary when we create the token for them.
        Create a bookseller
      operationId: requestBookseller
      produces:
        - application/json
      parameters:
        - in: body
          name: createBooksellerRequest
          description: Create a bookerseller
          required: true
          schema:
            $ref: '#/definitions/CreateBooksellerRequest'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Request
      security:
        - api_key: []
    put:
      tags:
        - Bookseller API
      summary: update a bookseller details
      description: |-
        TODO - this should be a PUT if updating and the bookseller id should be in the path
        TODO - Need to generate tokens for publishers ( under admin ) also
        TODO - SAN
        Update book seller details.
      operationId: updateBookseller
      produces:
        - application/json
      parameters:
        - in: body
          name: updateBooksellerRequest
          description: Update bookseller
          required: true
          schema:
            $ref: '#/definitions/UpdateBooksellerRequest'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Request
      security:
        - api_key: []
  /publisher:
    post:
      tags:
        - APA Administration API
      summary: Create a publisher
      description: |-
        TODO - the schema, operation & body names
        TODO - do we use pubID
        TODO - who is going to register the publishers? We might need a create publisher ReST for APA staff, and a update publisher details ReST for either APA staff or logged in publisher. The token API only generate/regenerate the API for this publisher. It can be requested by either APA staff or logged in publisher. We need the publisher details when we create them or update details. But the details are not necessary when we create the token for them.
        Create a publisher
      operationId: requestPublisher
      produces:
        - application/json
      parameters:
        - in: body
          name: createPublisherRequest
          description: Create a publisher
          required: true
          schema:
            $ref: '#/definitions/CreatePublisherRequest'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Request
      security:
        - api_key: []
    put:
      tags:
        - Non-Bookseller API
      summary: update a publisher's details
      description: |-
        TODO - this should be a PUT if updating and the publisher id should be in the path
        Update publisher details.
      operationId: updatePublisher
      produces:
        - application/json
      parameters:
        - in: body
          name: updatePublisherRequest
          description: Update publisher
          required: true
          schema:
            $ref: '#/definitions/UpdatePublisherRequest'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Request
      security:
        - api_key: []
  /generate-token-bookseller/{SAN}:
    post:
      tags:
        - APA Administration API
      summary: Generate a bookseller's token
      description: |-
        Generate a bookseller's token. The previous token will be removed
          TODO fix operation id & model name
          TODO POST parameters are normally in the body model
          TODO this should be the bookseller's token (different parameters for publisher).
          TODO Cat how do we do this for all book stores?  ---- Need to discuss
      operationId: generateBooksellerTokenAPA
      produces:
        - application/json
      parameters:
        - name: SAN
          in: path
          description: The SAN of the bookseller
          type: string
          required: true
        - name: email
          in: query
          description: The email of the bookseller to accept the token
          type: string
          required: true
      responses:
        '200':
          description: Token is sent successfully
        '400':
          description: Invalid Request
      security:
        - api_key: []
  /generate-token-publisher/{pubID}:
    post:
      tags:
        - APA Administration API
      summary: Generate a publisher's token
      description: |-
        Generate a publisher's token. The previous token will be removed
          TODO fix operation id & model name
          TODO POST parameters are normally in the body model
          TODO this should be the publisher's token (different parameters for bookseller).
          TODO Cat how do we do this for all publishers?  ---- Need to discuss
      operationId: generatePublisherTokenAPA
      produces:
        - application/json
      parameters:
        - name: pubID
          in: path
          description: The pubID of the publisher
          type: string
          required: true
        - name: email
          in: query
          description: The email of the publisher to accept the token
          type: string
          required: true
      responses:
        '200':
          description: Token is sent successfully
        '400':
          description: Invalid Request
      security:
        - api_key: []
  /sale:
    post:
      tags:
        - Bookseller API
      summary: Update stock levels & sales of a series of ISBN-13.
      description: |-
        The ISBN-13/timestamp will be used to de-duplicate sales/stock levels
         TODO - Parminder please grab a complex block 6, and we will discuss the rules to uniquely identify the stock to be updated.
         TODO - stage 1 sales - a daily running total of sales that could be sent multiple times a day or once a day in a batch
         TODO - also want the average selling price and the currency code
         TODO - Stage 1 stocks - only want the current in-stock/available, on-order, committed back-order
      operationId: batchStock
      produces:
        - application/json
      parameters:
        - in: body
          name: Sale data
          required: true
          schema:
            $ref: '#/definitions/Sale'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Sale
      security:
        - api_key: []
  /publisher/simple-stock/{ISBN-13}:
    put:
      tags:
        - Non-Bookseller API
      summary: Publisher update of stock & availability for an ISBN-13 with a single supplier (simple)
      description: |-
        Product supply details (including stock OnHand, OnOrder and CBO)
        TODO - Parminder - same as for /publisher/stock/{ISBN-13}
      operationId: publsiherSimpleStock
      consumes:
        - application/xml
      produces:
        - application/json
      parameters:
        - name: ISBN-13
          in: path
          description: ISBN-13 of the title to be updated.
          required: true
          type: integer
          format: int64
          minimum: 9780000000000
          maximum: 9790000000000
        - in: body
          name: productSupply
          description: The ONIX 3.0 Block 6, TODO, took away the full block 6 array, it will be a simple update
          required: true
          schema:
            $ref: '#/definitions/PublisherSimpleStock'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid stock information supplied (validation issue)
        '404':
          description: ISBN-13 not found for this publisher.
      security:
        - api_key: []
  /browser-extension:
    get:
      tags:
        - Stage 2
      summary: Public API browser extension to see basic bibliographic data for ISBN-13
      description: |-
        Browser extension similar to Biblio-matic - will be a Stage 2 Public API
         @TODO - Paramters
         @TODO - Produces
         @TODO - operationId
         @TODO - need a response for when the ISBN-13 isn't in the TP database (see Biblio-matic extsions response)
         @TODO - Tina.. This should be covered by the /onix and the /availablity APIs, yes we will need to create a browser extension which calls these endpoints.
      operationId: TODO
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid Request
  /bookseller-25hours-no-updates/{SAN}:
    post:
      tags:
        - Stage 2
      summary: Automatic notifications when a bookseller hasn't sent a sales/stock update for 25 hours.
      description: |-
        Send email to bookseller if they haven't updated sales/stock in past 25 hours - will be a Stage 2 Public API
         @TODO - Paramters
         @TODO - Produces
         @TODO - operationId
         @TODO - need a response for when the ISBN-13 isn't in the TP database (see Biblio-matic extsions response)
      operationId: notificationBookseller25hoursNoUpdates
      produces:
        - application/json
      parameters:
        - name: SAN
          in: path
          description: The SAN of the bookseller
          type: string
          required: true
        - name: email
          in: query
          description: The email of the bookseller to receive the notification
          type: string
          required: true
      responses:
        '200':
          description: Notification is sent successfully
        '400':
          description: Invalid Request
      security:
        - api_key: []
  /ecommerce-order:
    post:
      tags:
        - Stage 2
      summary: Send a Pacstream type ecommerce order directly to a Publisher.
      description: |-
        The bookseller can send a Pacstream type order from their POS to the Publisher via TP's API - not needing to send an invoice at this stage but need to know if the API needs to send order updates from the publisher/distributer
          @TODO - discuss with team what to send and we need to receive back a PO acknowledgement from the publisher and send that to the bookseller
      responses:
        '200':
          description: Order is sent successfully
        '400':
          description: Invalid Request
      security:
        - api_key: []
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  PublisherStock:
    description: |-
      Multiple Block 6
      TODO Can we rely on a maximum one supplier per country ? then we only need country, onorder, onhand
    type: string
    xml:
      name: ProductSupply
    properties:
      Market:
        type: object
        properties:
          Territory:
            type: object
            properties:
              CountriesIncluded:
                type: string
                example: AU
      SupplyDetail:
        type: object
        properties:
          Supplier:
            type: object
            properties:
              SupplierRole:
                type: integer
                example: '00'
              SupplierIdentifier:
                type: object
                properties:
                  SupplierIDType:
                    type: number
                    example: 7
                  IDValue:
                    type: number
                    example: 9021000
              SupplierName:
                type: string
                example: XYZ Distribution Services
              TelephoneNumber:
                type: string
                example: +61 2 2000 2000
              FaxNumber:
                type: string
                example: +61 2 2000 2000
              EmailAddress:
                type: string
                example: email@exmaple.com
          ProductAvailability:
            type: number
            example: 10
          SupplyDate:
            type: object
            properties:
              SupplyDateRole:
                type: number
                example: 2
              Date:
                type: string
                format: date
                example: 20220501
                properties:
                  dateformat:
                    type: number
                    example: '00'
                    xml:
                      attribute: true
          Stock:
            type: object
            properties:
              OnHand:
                type: integer
                minimum: 0
                example: 25
              OnOrder:
                type: integer
                minimum: 0
                example: 44
          Price:
            type: object
            properties:
              PriceType:
                type: number
                example: '02'
              PriceAmount:
                type: number
                example: 22.99
              Tax:
                type: object
                properties:
                  TaxType:
                    type: number
                    example: 1
                  TaxRateCode:
                    type: string
                    example: S
                  TaxRatePercent:
                    type: number
                    example: 15
                  TaxableAmount:
                    type: number
                    example: 19.99
                  TaxAmount:
                    type: number
                    example: 3
              CurrencyCode:
                type: string
                example: AUD
  PublisherSimpleStock:
    description: |-
      Simple stock update to one supplier per country per ISBN-13
      TODO Can we rely on a maximum one supplier per country ? then we only need country, onorder, onhand
    type: string
    xml:
      name: ProductSupply
    properties:
      Market:
        type: object
        properties:
          Territory:
            type: object
            properties:
              CountriesIncluded:
                type: string
                example: AU
      SupplyDetail:
        type: object
        properties:
          Supplier:
            type: object
            properties:
              SupplierRole:
                type: integer
                example: '00'
              SupplierIdentifier:
                type: object
                properties:
                  SupplierIDType:
                    type: number
                    example: 7
                  IDValue:
                    type: number
                    example: 9021000
              SupplierName:
                type: string
                example: XYZ Distribution Services
              TelephoneNumber:
                type: string
                example: +61 2 2000 2000
              FaxNumber:
                type: string
                example: +61 2 2000 2000
              EmailAddress:
                type: string
                example: email@exmaple.com
          ProductAvailability:
            type: number
            example: 10
          SupplyDate:
            type: object
            properties:
              SupplyDateRole:
                type: number
                example: 2
              Date:
                type: string
                format: date
                example: 20220501
                properties:
                  dateformat:
                    type: number
                    example: '00'
                    xml:
                      attribute: true
          Stock:
            type: object
            properties:
              OnHand:
                type: integer
                minimum: 0
                example: 25
              OnOrder:
                type: integer
                minimum: 0
                example: 44
          Price:
            type: object
            properties:
              PriceType:
                type: number
                example: '02'
              PriceAmount:
                type: number
                example: 22.99
              Tax:
                type: object
                properties:
                  TaxType:
                    type: number
                    example: 1
                  TaxRateCode:
                    type: string
                    example: S
                  TaxRatePercent:
                    type: number
                    example: 15
                  TaxableAmount:
                    type: number
                    example: 19.99
                  TaxAmount:
                    type: number
                    example: 3
              CurrencyCode:
                type: string
                example: AUD
  TokenRequest:
    type: object
    properties:
      firstName:
        type: string
        example: Joe
      lastName:
        type: string
        example: Public
      email:
        type: string
        example: joe@example.com
      website:
        type: string
        example: https://example.com
      typeBlog:
        type: boolean
      typeRetail:
        type: boolean
      typePublisherDistributor:
        type: boolean
      typeOther:
        type: boolean
      requireOnixSimple:
        type: boolean
      requireOnixFull:
        type: boolean
      requireImage:
        type: boolean
      requireWordPress:
        type: boolean
      requireShopify:
        type: boolean
  CreateBooksellerRequest:
    type: object
    properties:
      nationalIDCode:
        type: string
        example: AU
      SAN:
        type: integer
        example: 12345
      title:
        type: string
        example: Mr
      firstName:
        type: string
        example: Joe
      lastName:
        type: string
        example: Public
      jobFunction:
        type: string
        example: Purchasing
      department:
        type: string
        example: Purchasing
      phone:
        type: string
        example: 02 2222 3333
      email:
        type: string
        example: joe@example.com
      companyName:
        type: string
        example: Joe's Bookshop
      ABN:
        type: string
        example: 981000222333
      streetAddress:
        type: string
        example: 1 Main Street
      suburb:
        type: string
        example: Sydney
      state:
        type: string
        example: NSW
      postcode:
        type: integer
        minimum: 1000
        maximum: 8000
        example: 2010
      latitude:
        type: number
        minimum: -90
        maximum: 90
      longitude:
        type: number
        minimum: -90
        maximum: 90
  CreatePublisherRequest:
    type: object
    properties:
      nationalIDCode:
        type: string
        example: AU
      SAN:
        type: integer
        example: 12345
      title:
        type: string
        example: Mr
      firstName:
        type: string
        example: Joe
      lastName:
        type: string
        example: Public
      jobFunction:
        type: string
        example: Purchasing
      department:
        type: string
        example: Purchasing
      phone:
        type: string
        example: 02 2222 3333
      email:
        type: string
        example: joe@example.com
      companyName:
        type: string
        example: Joe's Publishing
      ABN:
        type: string
        example: 981000222333
      streetAddress:
        type: string
        example: 1 Main Street
      suburb:
        type: string
        example: Sydney
      state:
        type: string
        example: NSW
      postcode:
        type: integer
        minimum: 1000
        maximum: 8000
        example: 2010
      latitude:
        type: number
        minimum: -90
        maximum: 90
      longitude:
        type: number
        minimum: -90
        maximum: 90
  UpdateBooksellerRequest:
    type: object
    properties:
      nationalIDCode:
        type: string
        example: AU
      title:
        type: string
        example: Mr
      firstName:
        type: string
        example: Joe
      lastName:
        type: string
        example: Public
      jobFunction:
        type: string
        example: Purchasing
      department:
        type: string
        example: Purchasing
      phone:
        type: string
        example: 02 2222 3333
      email:
        type: string
        example: joe@example.com
      companyName:
        type: string
        example: Joe's Bookshop
      ABN:
        type: string
        example: 981000222333
      streetAddress:
        type: string
        example: 1 Main Street
      suburb:
        type: string
        example: Sydney
      state:
        type: string
        example: NSW
      postcode:
        type: integer
        minimum: 1000
        maximum: 8000
        example: 2010
      latitude:
        type: number
        minimum: -90
        maximum: 90
      longitude:
        type: number
        minimum: -90
        maximum: 90
  UpdatePublisherRequest:
    type: object
    properties:
      nationalIDCode:
        type: string
        example: AU
      title:
        type: string
        example: Mr
      firstName:
        type: string
        example: Joe
      lastName:
        type: string
        example: Public
      jobFunction:
        type: string
        example: Purchasing
      department:
        type: string
        example: Purchasing
      phone:
        type: string
        example: 02 2222 3333
      email:
        type: string
        example: joe@example.com
      companyName:
        type: string
        example: Joe's Publisher
      ABN:
        type: string
        example: 981000222333
      streetAddress:
        type: string
        example: 1 Main Street
      suburb:
        type: string
        example: Sydney
      state:
        type: string
        example: NSW
      postcode:
        type: integer
        minimum: 1000
        maximum: 8000
        example: 2010
      latitude:
        type: number
        minimum: -90
        maximum: 90
      longitude:
        type: number
        minimum: -90
        maximum: 90
  Location:
    description: Location of the bookstore with stock
    type: array
    items:
      type: object
      properties:
        bookstore:
          type: string
          example: Books Are Us
        address:
          type: string
          example: 1 Main Street, Sydney, NSW
        phone:
          type: string
          example: (02) 555 1234
        website:
          type: string
          example: https://books.example.com
  Sale:
    description: |-
      Deduplicate the sales/stock data by use of the timestamp.
      The database key would be ISBN-13, book store, date ( yyyy-MM-dd )
    type: array
    items:
      type: object
      properties:
        ISBN-13:
          type: integer
          format: int64
          example: 9780000000001
        timestamp:
          type: string
          format: date-time
          example: '2022-06-25T14:23:10Z'
          description: |-
            TODO - Would this be a date now or is it converted to date when we store in Dynomodb ?
            TODO - This would be a date now ( and where ever called )
        sold:
          type: integer
          format: int64
          minimum: 0
        refunded:
          description: The book was returned/refunded by the client TODO - remove
          type: integer
          format: int64
          minimum: 0
        returned:
          description: The book was returned to the distributor/publisher  TODO - remove
          type: integer
          format: int64
          minimum: 0
        restocked:
          description: The number of books restocked from the distributor/publisher.  TODO - remove
          type: integer
          format: int64
          minimum: 0
        shrinkage:
          description: Reduction in the number of books due to wastage or theft.  TODO - remove
          type: integer
          format: int64
          minimum: 0
        in-stock:
          type: integer
          format: int64
          minimum: 0
        back-order:
          type: integer
          format: int64
          minimum: 0
  ListPreBuilt:
    type: array
    items:
      type: object
      properties:
        NAME:
          type: string
          example: Australian-Fishing-Network
        description:
          type: string
          example: Australian Fishing Network - New Release Titles for upcoming 180 days.
        onixVersion:
          type: string
          example: ONIX_3_0
        lastSheduleRun:
          type: string
          format: date-time
        schedules:
          type: array
          items:
            type: string
            format: date-time
        _href:
          type: string
          format: uri
          example: /pre-built/Australian-Fishing-Network
  SearchResult:
    type: array
    items:
      type: object
      properties:
        ISBN-13:
          type: integer
          format: int64
          example: 9780000000001
        title:
          type: string
          example: Happy Holidays.
        onix-url:
          type: string
          description: Broken into sub directories by modulas of the ISBN-13 number.
          example: https://public.onix.s3.aws.com/001/9780000000001.xml.gz